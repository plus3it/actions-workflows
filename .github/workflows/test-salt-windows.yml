name: Run salt formula tests on Windows

on:
  workflow_call:
    inputs:
      salt-os-version:
        description: Github Windows runner to run the tests on, see <https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources>
        required: true
        type: string
      salt-state:
        description: Salt state to execute
        required: true
        type: string
      salt-pillar-root:
        description: Relative paths to the salt pillar to test
        default: ''
        type: string
      salt-installer-url:
        description: URL to the salt installer, `salt-version` is templated as `{0}`
        default: 'https://packages.broadcom.com/artifactory/saltproject-generic/windows/{0}/Salt-Minion-{0}-Py3-AMD64-Setup.exe'
        type: string
      salt-version:
        description: Version of salt to install
        default: '3006.10'
        type: string
      salt-python-requirements-files:
        description: Space-separated list of paths to python requirements files installed by salt-pip, `salt-os-version` is templated as `{0}`
        default: ''
        type: string

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ${{ inputs.salt-os-version == 'windows-2019' && fromJSON(format('["codebuild-salt-build-{0}-{1}", "image:windows-3.0", "image-size:medium"]', github.run_id, github.run_attempt)) || inputs.salt-os-version }}
    env:
      LC_ALL: en_US.utf8
      SALT_REPO_URL: ${{ format(inputs.salt-installer-url, inputs.salt-version) }}
    steps:
      - name: Clone this git repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      # Install salt
      - run: >
          curl -sSL -o "${TEMP}/salt-minion-installer.exe" "${{ env.SALT_REPO_URL }}"
      - run: >
          Start-Process -FilePath "${env:temp}\salt-minion-installer.exe"
          -ArgumentList @("/S", "/install-dir=c:\salt")
          -NoNewWindow -PassThru -Wait
        shell: pwsh
      - run: C:\\salt\\salt-call.exe --versions-report

      # Install salt python requirements
      - if: inputs.salt-python-requirements-files
        run: >
          mapfile -t PYTHON_REQUIREMENTS < <(echo ${{ format(inputs.salt-python-requirements-files, inputs.salt-os-version) }}) &&
          for FILE in "${PYTHON_REQUIREMENTS[@]}"; do
          C:\\salt\\salt-pip.exe install -r "$FILE";
          done

      # Sync custom salt modules, if any
      - run: >
          C:\\salt\\salt-call.exe --local --retcode-passthrough
          --log-file-level debug
          --file-root="${{ github.workspace }}" --pillar-root=${{ inputs.salt-pillar-root }}
          saltutil.sync_all

      # Run tests
      - run: >
          C:\\salt\\salt-call.exe --local --retcode-passthrough
          --log-file-level debug
          --file-root="${{ github.workspace }}" --pillar-root=${{ inputs.salt-pillar-root }}
          state.show_sls
          "${{ inputs.salt-state }}"
      - run: >
          C:\\salt\\salt-call.exe --local --retcode-passthrough
          --log-file-level debug
          --file-root="${{ github.workspace }}" --pillar-root=${{ inputs.salt-pillar-root }}
          state.sls
          "${{ inputs.salt-state }}"
          mock=True
